	// Etapa 2 do trabalho de Compiladores do semestre 2024/2
	// Por Matheus Rodrigues Fonseca e Thalles Fernandes Rezende

%{
	#include <iostream>
	#include "ast.hpp"
	using namespace std;

	int yylex();
	int yyerror(string msg);
	extern char* yytext;
	extern int getLineNumber();
%}

%token KW_CHAR
%token KW_INT
%token KW_IF
%token KW_THEN
%token KW_ELSE
%token KW_WHILE
%token KW_READ
%token KW_PRINT
%token KW_RETURN
%token TK_IDENTIFIER
%token LIT_INT
%token LIT_CHAR
%token LIT_STRING
%token TOKEN_ERROR


%left '|'
%left '&'
%left '='
%left '<' '>'
%left '+' '-'
%left '*' '/'
%right '~'
%left '('

%%

programa: decVar programa
	| decVec programa
	| decFun programa
	|
	;

init: LIT_CHAR
	| LIT_INT
	;

tipo: KW_CHAR
	| KW_INT
	;

decVar: tipo TK_IDENTIFIER '=' init ';'
	;

decVec: tipo TK_IDENTIFIER '[' LIT_INT ']' VecList
	;

VecList: ';'
	| '=' init VecList2
	;

VecList2: init VecList2
	| ';'
	;

decFun: tipo TK_IDENTIFIER '(' params ')' block
	;

params: tipo TK_IDENTIFIER tail
	|
	;

tail: ',' tipo TK_IDENTIFIER tail
	|
	;

block: '{' list_cmds '}'
	;

list_cmds: cmd list_cmds
	|
	;

cmd: cmd_if 
	| cmd_while 
	| cmd_print 
	| cmd_read ';'
	| cmd_return ';'
	| cmd_attr ';'
	| block
	| ';'
	;

cmd_func: TK_IDENTIFIER '(' func_params ')'
	;


func_params: expressao func_tail
	|
	;

func_tail: ',' expressao func_tail
	|
	;

expressao: LIT_INT	
	| LIT_CHAR
	| TK_IDENTIFIER						
	| TK_IDENTIFIER '[' expressao ']'
	| cmd_func
	| '~' expressao						
	| '(' expressao ')'					
	| expressao '*' expressao			
	| expressao '/' expressao			
	| expressao '+' expressao			
	| expressao '-' expressao			
	| expressao '<' expressao          
	| expressao '>' expressao           
	| expressao '=' expressao           
	| expressao '&' expressao           
	| expressao '|' expressao          
	;

cmd_attr: TK_IDENTIFIER '=' expressao
	| TK_IDENTIFIER '[' expressao ']' '=' expressao
	;

cmd_if: KW_IF '(' expressao ')' KW_THEN cmd
	| KW_IF '(' expressao ')' KW_THEN cmd KW_ELSE cmd
	;

cmd_while: KW_WHILE '(' expressao ')' cmd
	;

print_args: LIT_STRING print_tail
	| expressao print_tail
	;

print_tail: LIT_STRING print_tail
	| expressao print_tail
	| ';'
	;

cmd_read: KW_READ TK_IDENTIFIER
	;
	
cmd_print: KW_PRINT print_args
	;
	
cmd_return: KW_RETURN expressao
	;

%%

int yyerror(string msg) {
	std::cout << "\n[ERRO] linha: " << getLineNumber() << ": " << yytext << "\n";
	exit(3);
}
